{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","title","src","alt","MovieGenre","genre","className","Movie","genres","synopsis","map","index","key","App","state","_renderMovies","movies","movie","medium_cover_image","id","_getMovies","a","_callAPI","setState","fetch","response","json","data","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRA8BA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAOC,EAAO,EAAPA,MACzB,OACI,yBAAKC,IAAKF,EAAQG,IAAKF,IAQ/B,SAASG,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,0BAAMC,UAAU,eAAeD,GAQxBE,MA9Cf,YAA+C,IAA/BN,EAA8B,EAA9BA,MAAMD,EAAwB,EAAxBA,OAAOQ,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SAChC,OACI,yBAAKH,UAAU,SACX,yBAAKA,UAAU,kBACX,kBAACP,EAAD,CAAaC,OAAQA,EAAQC,MAAOA,KAExC,yBAAKK,UAAU,kBACX,4BAAKL,GACL,yBAAKK,UAAU,iBACVE,EAAOE,KAAI,SAACL,EAAMM,GAAP,OACR,kBAACP,EAAD,CAAYC,MAAOA,EAAOO,IAAKD,OAEnC,uBAAGL,UAAU,kBAAkBG,OC+BpCI,E,4MA1CbC,MAAQ,G,EAORC,cAAgB,WAKd,OAJe,EAAKD,MAAME,OAAON,KAAI,SAAAO,GACnC,OAAO,kBAAC,EAAD,CAAOhB,MAAOgB,EAAMhB,MAAOD,OAAQiB,EAAMC,mBAAoBV,OAAQS,EAAMT,OAAQC,SAAUQ,EAAMR,SAAUG,IAAKK,EAAME,S,EAMnIC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLN,EADK,OAEX,EAAKO,SAAS,CACZP,WAHS,2C,EAObM,S,sBAAW,8BAAAD,EAAA,+EAEgBG,MAAM,6DAFtB,cAEDC,EAFC,gBAGYA,EAASC,OAHrB,cAGDA,EAHC,yBAIAA,EAAKC,KAAKX,QAJV,2DAOAY,QAAQC,IAAR,OAPA,0D,kEAlBTC,KAAKV,e,+BA8BL,OACE,yBAAKd,UAAU,OACZwB,KAAKhB,MAAME,OAASc,KAAKf,gBAAkB,e,GArClCgB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.5ed662eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} title={title}></MoviePoster>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre,index) => \r\n                        <MovieGenre genre={genre} key={index} />\r\n                    )}\r\n                    <p className=\"Movie_Synopsis\">{synopsis}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes ={\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nfunction MoviePoster({poster,title}){\r\n    return(\r\n        <img src={poster} alt={title}></img>\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Moive from './Movie.js'\r\n\r\nclass App extends Component{\r\n  state = {\r\n  }\r\n\r\n  componentDidMount(){\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie =>{     \r\n      return <Moive title={movie.title} poster={movie.medium_cover_image} genres={movie.genres} synopsis={movie.synopsis} key={movie.id}></Moive>\r\n    })\r\n\r\n    return movies;\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callAPI();\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callAPI = async () => {\r\n    try {\r\n      const response = await fetch('https://yts.mx/api/v2/list_movies.json?sort_by=like_count');\r\n      const json = await response.json();\r\n      return json.data.movies;\r\n    }\r\n    catch (err) {\r\n      return console.log(err);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"App\">\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}